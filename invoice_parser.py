import pandas as pd
import openpyxl
import re
from pathlib import Path
from datetime import datetime
import os
import sys
import json

def get_current_month():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    month_names = {
        '01': '—è–Ω–≤–∞—Ä—å', '02': '—Ñ–µ–≤—Ä–∞–ª—å', '03': '–º–∞—Ä—Ç', '04': '–∞–ø—Ä–µ–ª—å',
        '05': '–º–∞–π', '06': '–∏—é–Ω—å', '07': '–∏—é–ª—å', '08': '–∞–≤–≥—É—Å—Ç',
        '09': '—Å–µ–Ω—Ç—è–±—Ä—å', '10': '–æ–∫—Ç—è–±—Ä—å', '11': '–Ω–æ—è–±—Ä—å', '12': '–¥–µ–∫–∞–±—Ä—å'
    }
    
    current_month = datetime.now().month
    month_name = month_names.get(str(current_month).zfill(2))
    
    print(f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Å—è—Ü: {month_name}", file=sys.stderr)
    return month_name

def find_table_structure(ws):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –¢–í–û–ï–ì–û –°–ö–†–ò–ü–¢–ê"""
    print("üîç –ò—â—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...", file=sys.stderr)
    
    headers_positions = {}
    
    for row in ws.iter_rows():
        for cell in row:
            if cell.value:
                cell_value = str(cell.value).strip()
                
                if "–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)" in cell_value:
                    headers_positions['description'] = (cell.row, cell.column)
                    print(f"üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–¢–æ–≤–∞—Ä—ã' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}", file=sys.stderr)
                elif "–°—É–º–º–∞" in cell_value and cell_value != "–°—É–º–º–∞ —Å –ù–î–°":
                    headers_positions['amount'] = (cell.row, cell.column)
                    print(f"üí∞ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–°—É–º–º–∞' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}", file=sys.stderr)
                elif "‚Ññ" == cell_value and cell.column < 10:
                    headers_positions['number'] = (cell.row, cell.column)
                    print(f"üî¢ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '‚Ññ' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}", file=sys.stderr)
                elif "–ö–æ–ª-–≤–æ" in cell_value:
                    headers_positions['quantity'] = (cell.row, cell.column)
                    print(f"üì¶ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ö–æ–ª-–≤–æ' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}", file=sys.stderr)
                elif "–ï–¥." in cell_value:
                    headers_positions['unit'] = (cell.row, cell.column)
                    print(f"üìè –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ï–¥.' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}", file=sys.stderr)
                elif "–¶–µ–Ω–∞" in cell_value:
                    headers_positions['price'] = (cell.row, cell.column)
                    print(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–¶–µ–Ω–∞' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}", file=sys.stderr)
    
    return headers_positions

def extract_data_from_description(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É, –º–∞—Ä—à—Ä—É—Ç, –≥–æ—Å. –Ω–æ–º–µ—Ä –∏ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø"""
    description_str = str(description)
    
    # –ú–∞—Ä—à—Ä—É—Ç (–≤—Å–µ –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π)
    route = description_str.split(',')[0].strip()
    
    # –î–∞—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "–æ—Ç 06.09.25")
    date_match = re.search(r'–æ—Ç\s+(\d{2}\.\d{2}\.\d{2})', description_str)
    date_str = date_match.group(1) if date_match else "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    # –ì–æ—Å. –Ω–æ–º–µ—Ä - –∏—â–µ–º 3 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥
    plate_match = re.search(r'(\d{3})', description_str)
    car_plate = plate_match.group(1) if plate_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–∞–º–∏–ª–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
    driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)\s+[–ê-–Ø]\.[–ê-–Ø]\.', description_str)
    if driver_match:
        driver_name = driver_match.group(1)
    else:
        alt_driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)', description_str)
        driver_name = alt_driver_match.group(1) if alt_driver_match else "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    return route, date_str, car_plate, driver_name

def parse_invoice_file(file_path):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –ò–ó –¢–í–û–ï–ì–û –°–ö–†–ò–ü–¢–ê"""
    try:
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path.name}", file=sys.stderr)
        wb = openpyxl.load_workbook(file_path, data_only=True)
        ws = wb.active
        
        headers = find_table_structure(ws)
        
        if not headers.get('description') or not headers.get('amount'):
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã", file=sys.stderr)
            return []
        
        header_row = max(h[0] for h in headers.values())
        description_col = headers['description'][1]
        amount_col = headers['amount'][1]
        
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:", file=sys.stderr)
        print(f"   - –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {header_row + 1}", file=sys.stderr)
        print(f"   - –°—Ç–æ–ª–±–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è: {description_col}", file=sys.stderr)
        print(f"   - –°—Ç–æ–ª–±–µ—Ü —Å—É–º–º—ã: {amount_col}", file=sys.stderr)
        
        parsed_data = []
        row_num = header_row + 1
        processed_count = 0
        current_empty_rows = 0
        max_empty_rows = 5
        
        print(f"üîé –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...", file=sys.stderr)
        
        while current_empty_rows < max_empty_rows:
            description_cell = ws.cell(row=row_num, column=description_col)
            description = description_cell.value
            
            if not description:
                current_empty_rows += 1
                row_num += 1
                continue
                
            current_empty_rows = 0
            description_str = str(description)
            
            if any(word in description_str.lower() for word in ['–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥', '—Å—É–º–º–∞']):
                row_num += 1
                continue
            
            amount_cell = ws.cell(row=row_num, column=amount_col)
            amount = amount_cell.value
            
            if amount is not None:
                try:
                    if isinstance(amount, str) and any(char.isalpha() for char in amount.replace(' ', '').replace(',', '.')):
                        row_num += 1
                        continue
                    
                    amount_str = str(amount).replace(' ', '').replace(',', '.')
                    amount_value = float(amount_str)
                    
                    route, date_str, car_plate, driver_name = extract_data_from_description(description_str)
                    
                    if car_plate != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and amount_value > 0:
                        parsed_data.append({
                            '–î–∞—Ç–∞': date_str,
                            '–ú–∞—Ä—à—Ä—É—Ç': route,
                            '–°—Ç–æ–∏–º–æ—Å—Ç—å': amount_value,
                            '–ì–æ—Å_–Ω–æ–º–µ—Ä': car_plate,
                            '–í–æ–¥–∏—Ç–µ–ª—å': driver_name,
                            '–ò—Å—Ç–æ—á–Ω–∏–∫': file_path.name,
                            '–°—Ç—Ä–æ–∫–∞': row_num
                        })
                        processed_count += 1
                        print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {row_num}: {date_str} | {route[:20]}... | {car_plate} | {driver_name} | {amount_value:,.0f} —Ä—É–±.", file=sys.stderr)
                    
                except (ValueError, TypeError):
                    pass
            
            row_num += 1
            
            if row_num > header_row + 1000:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1000 —Å—Ç—Ä–æ–∫", file=sys.stderr)
                break
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}", file=sys.stderr)
        return parsed_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}", file=sys.stderr)
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Python –ø–∞—Ä—Å–µ—Ä–∞...", file=sys.stderr)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        file_paths = []
        if len(sys.argv) > 1:
            file_paths = [Path(f) for f in sys.argv[1:]]
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            input_folder = Path("uploads")
            if input_folder.exists():
                file_paths = list(input_folder.glob("*.xlsx"))
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_paths)}", file=sys.stderr)
        
        if not file_paths:
            error_result = {
                "success": False,
                "error": "–ù–µ—Ç Excel-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "data": []
            }
            print(json.dumps(error_result, ensure_ascii=False))
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = []
        
        for file_path in file_paths:
            if '~' in file_path.name:
                continue
            file_data = parse_invoice_file(file_path)
            all_data.extend(file_data)
        
        if not all_data:
            error_result = {
                "success": False,
                "error": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                "data": []
            }
            print(json.dumps(error_result, ensure_ascii=False))
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_amount = df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
        unique_cars = [x for x in df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique() if x != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"]
        unique_drivers = [x for x in df['–í–æ–¥–∏—Ç–µ–ª—å'].unique() if x != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–µ–±–∞
        result = {
            "success": True,
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å–µ–π",
            "statistics": {
                "total_records": len(all_data),
                "total_amount": total_amount,
                "unique_cars": len(unique_cars),
                "unique_drivers": len(unique_drivers),
                "car_list": unique_cars,
                "driver_list": unique_drivers
            },
            "data": all_data
        }
        
        print(json.dumps(result, ensure_ascii=False))
        
    except Exception as e:
        error_result = {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}",
            "data": []
        }
        print(json.dumps(error_result, ensure_ascii=False))

if __name__ == "__main__":
    main()
