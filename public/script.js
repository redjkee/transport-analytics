// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let selectedFiles = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeDragAndDrop();
    setupFileInput();
    console.log('üöÄ Transport Analytics frontend loaded');
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag and drop
function initializeDragAndDrop() {
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag and drop
    uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', function() {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        handleSelectedFiles(files);
    });

    // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    uploadArea.addEventListener('click', function() {
        fileInput.click();
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ input –¥–ª—è —Ñ–∞–π–ª–æ–≤
function setupFileInput() {
    const fileInput = document.getElementById('fileInput');
    
    fileInput.addEventListener('change', function() {
        handleSelectedFiles(this.files);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function handleSelectedFiles(files) {
    const validFiles = Array.from(files).filter(file => {
        const isValid = file.name.endsWith('.xlsx') || file.name.endsWith('.xls');
        if (!isValid) {
            showError(`–§–∞–π–ª "${file.name}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º`);
        }
        return isValid;
    });

    selectedFiles = [...selectedFiles, ...validFiles];
    updateFileList();
    updateProcessButton();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function updateFileList() {
    const fileList = document.getElementById('fileList');
    
    if (selectedFiles.length === 0) {
        fileList.innerHTML = '';
        return;
    }

    fileList.innerHTML = selectedFiles.map(file => `
        <div class="file-item">
            <span class="file-name">${file.name}</span>
            <span class="file-size">${formatFileSize(file.size)}</span>
        </div>
    `).join('');
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
function updateProcessButton() {
    const processBtn = document.getElementById('processBtn');
    processBtn.disabled = selectedFiles.length === 0;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const errorSection = document.getElementById('errorSection');
    const errorMessage = document.getElementById('errorMessage');
    
    errorMessage.textContent = message;
    errorSection.style.display = 'block';
    
    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        errorSection.style.display = 'none';
    }, 5000);
}

// –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É
function hideError() {
    const errorSection = document.getElementById('errorSection');
    errorSection.style.display = 'none';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
async function processFiles() {
    if (selectedFiles.length === 0) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    showProgress();
    hideError();
    hideResults();

    const processBtn = document.getElementById('processBtn');
    processBtn.disabled = true;

    try {
        // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
        const formData = new FormData();
        selectedFiles.forEach(file => {
            formData.append('files', file);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        updateProgress('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...', 30);
        
        const response = await fetch('/api/process-invoices', {
            method: 'POST',
            body: formData
        });

        updateProgress('–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤...', 60);

        const result = await response.json();

        if (!response.ok) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        updateProgress('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...', 90);

        if (result.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            displayResults(result);
            updateProgress('–ì–æ—Ç–æ–≤–æ!', 100);
            
            // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            setTimeout(() => {
                selectedFiles = [];
                updateFileList();
                updateProcessButton();
                hideProgress();
            }, 2000);
            
        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        showError(`–û—à–∏–±–∫–∞: ${error.message}`);
        hideProgress();
        processBtn.disabled = false;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
function showProgress() {
    const progressSection = document.getElementById('progressSection');
    progressSection.style.display = 'block';
}

// –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
function hideProgress() {
    const progressSection = document.getElementById('progressSection');
    progressSection.style.display = 'none';
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
function updateProgress(text, percent) {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    
    progressFill.style.width = percent + '%';
    progressText.textContent = text;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
function displayResults(result) {
    const resultsSection = document.getElementById('resultsSection');
    const statsGrid = document.getElementById('statsGrid');
    const tableBody = document.getElementById('tableBody');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statsGrid.innerHTML = `
        <div class="stat-card">
            <div class="stat-value">${result.statistics.total_records}</div>
            <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${formatCurrency(result.statistics.total_amount)}</div>
            <div class="stat-label">–û–±—â–∞—è —Å—É–º–º–∞</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${result.statistics.unique_cars}</div>
            <div class="stat-label">–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${result.statistics.unique_drivers}</div>
            <div class="stat-label">–í–æ–¥–∏—Ç–µ–ª–µ–π</div>
        </div>
    `;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    tableBody.innerHTML = result.data.map(item => `
        <tr>
            <td>${item.–î–∞—Ç–∞}</td>
            <td title="${item.–ú–∞—Ä—à—Ä—É—Ç}">${truncateText(item.–ú–∞—Ä—à—Ä—É—Ç, 50)}</td>
            <td>${item.–í–æ–¥–∏—Ç–µ–ª—å}</td>
            <td>${item.–ì–æ—Å_–Ω–æ–º–µ—Ä}</td>
            <td>${formatCurrency(item.–°—Ç–æ–∏–º–æ—Å—Ç—å)}</td>
            <td>${item.–ò—Å—Ç–æ—á–Ω–∏–∫}</td>
        </tr>
    `).join('');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    resultsSection.style.display = 'block';

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

// –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
function hideResults() {
    const resultsSection = document.getElementById('resultsSection');
    resultsSection.style.display = 'none';
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
function formatCurrency(amount) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(amount);
}

// –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.clearFiles = function() {
    selectedFiles = [];
    updateFileList();
    updateProcessButton();
    hideResults();
    hideError();
};

window.getFileCount = function() {
    return selectedFiles.length;
};
